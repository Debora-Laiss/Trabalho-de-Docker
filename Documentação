TRABALHO DE DEBORA LAIS NM

Para instalar o Docker em uma instância EC2 da AWS,  usei um script de inicialização (user_data.sh). Este script será executado quando a instância EC2 for iniciada.
Este script irá atualizar os pacotes do sistema, instalar o Docker, iniciar o serviço Docker, adicionar o usuário ec2-user ao grupo Docker e definir as permissões corretas para o socket Docker.
Para garantir que o Docker seja iniciado automaticamente sempre que a instância EC2 for reiniciada, usei o comando ao final do seu script de inicialização: sudo systemctl enable docker
Usei o docker version para verificar se o Docker foi instalado corretamente, você pode adicionar o seguinte comando ao final do seu script de inicialização: docker version


#!/bin/bash
sudo yum update -y
sudo yum -y install docker
sudo service docker start
sudo usermod -a -G docker ec2-user
sudo chmod 666 /var/run/docker.sock
sudo systemctl enable docker
docker version

Baixei tambem o docker compose
Primeiro, baixe o binário mais recente do Docker Compose diretamente do GitHub. Para fazer isso, usei o comando curl. Certifique-se de substituir v2.11.2 pela versão desejada do Docker Compose.
Após o download, aplique permissões de execução ao binário com o comando chmod
Para verificar se o Docker Compose foi instalado corretamente, você pode verificar a versão do Docker Compose com o seguinte comando: docker-compose --version


sudo curl -L "https://github.com/docker/compose/releases/download/v2.11.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version




2. Efetuar Deploy de uma aplicação Wordpress com: container de aplicação RDS database Mysql

database-1.cjjl6z4fjxwf.us-east-1.rds.amazonaws.com

version: '3.1'
 
services:
 
  wordpress:
    image: wordpress
    restart: always
    ports:
      - 80:80
    environment:
      WORDPRESS_DB_HOST: database-1.cjjl6z4fjxwf.us-east-1.rds.amazonaws.com
      WORDPRESS_DB_USER: admin
      WORDPRESS_DB_PASSWORD: bancoDL
      WORDPRESS_DB_NAME: wordpress
    volumes:
      - /root/wordpress:/var/www/html




3. configuração da utilização do serviço
EFS AWS para estáticos do container
de aplicação Wordpress

Meu o processo completo de criação e configuração de um sistema de arquivos Elastic File System (EFS) na Amazon Web Services (AWS), realizado com sucesso para habilitar a implantação de uma aplicação WordPress.

Passo 1: Criação do Sistema de Arquivos EFS:

Acessei o console da AWS e naveguei até o console EFS.
Cliquei em "Criar sistema de arquivos" para iniciar o processo.
Configurei os detalhes do sistema de arquivos, selecionando a VPC e sub-rede apropriadas, conforme necessário.
Passo 2: Instalação do Utilitário de Montagem EFS:

Conectei-me à instância EC2 designada para hospedar a aplicação WordPress.
Executei o seguinte comando para instalar o utilitário de montagem EFS:
bash

sudo yum install -y amazon-efs-utils
Passo 3: Montagem do Sistema de Arquivos EFS:

Criei um diretório temporário para a montagem do EFS:
bash

sudo mkdir /efs
Montei o EFS utilizando o seguinte comando (substituindo fs-XXXXXXXXXXX pelo ID do sistema de arquivos EFS criado):
bash

sudo mount -t efs -o tls fs-XXXXXXXXXXX /efs/
Passo 4: Configuração do /etc/fstab para Montagem Automática:

Editei o arquivo /etc/fstab:
bash

sudo nano /etc/fstab
Adicionei a seguinte linha ao final do arquivo (substituindo fs-XXXXXXXXXXX pelo ID do sistema de arquivos EFS):
javascript

fs-XXXXXXXXXXX:/ /var/www/html efs _netdev,tls 0 0
Passo 5: Deploys de uma Aplicação WordPress:




4. configuração do serviço de Load
Balancer AWS para a aplicação
Wordpress

Load Balancer Criado:

Acessei o console da AWS e naveguei até a seção EC2.
Cliquei em "Load Balancers" e, em seguida, escolhi "Create Load Balancer".
Optei por criar um "Application Load Balancer".
Configuração do Load Balancer:

Durante o processo de criação do Load Balancer, fornecei informações básicas, incluindo o nome do Load Balancer.
Escolhi o esquema como "internet-facing" para permitir o tráfego da Internet.
Selecionai o tipo de endereço IP, optando por IPv4 ou Dualstack, conforme necessário.
Registro dos Alvos:

Após a criação do Load Balancer, acessei a página "Register targets".
Adicionei as instâncias EC2 desejadas como alvos, especificando as portas necessárias.
Escolhi a opção "Include as pending below" para garantir que as instâncias fossem incluídas como alvos pendentes.
Teste do Load Balancer:

Para verificar a funcionalidade do Load Balancer, copiei o nome DNS atribuído a ele.
Colei o nome DNS no campo de endereço de um navegador web conectado à Internet.
Verifiquei se o navegador exibiu a página padrão, garantindo assim que o tráfego estava sendo distribuído corretamente para as instâncias EC2 registradas.
